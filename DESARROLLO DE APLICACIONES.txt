1) Inicializar proyecto: CTRL + SHIFT + P -> Escribir Flutter -> Seleccionar New Project -> Seleccionar Application -> Seleccionar Lugar sin nombre -> Poner nombre

2) Ejecutar proyecto: Android Studio -> more actions -> Virtual device manager -> Create device (Phonearena.com para especificaciones de un celular) -> pixel 6 pro -> next
                      CTRL + SHIFT + P -> Seleccionar mobile emulator -> dentro de archivo dart (el directorio no debe tener carácteres especiales) fn + f5. Para detener depuracion clickear boton stop.

                      Para un proyecto flutter descargado -> flutter pub get en el terminal

3) X:\new project\flutter_app_1\android\app\src\main\AndroidManifest.xml -> android:label="Nombre de la app" -> android:icon="directorio de imagen se encuentran en la carpeta res"

widget -> StatelessWidget
        ->StatefulWidget

Investigar los componentes del scaffold

despues del title poner leading (dentro deL scaffold/AppBar): leading: Icon(Icons.home) -> para poner iconos

Dentro de MaterialApp (home: const MyHomePage(title: 'I Love: ') -> se puede editar el titulo.

Arriba en MaterialApp poner: debugShowCheckedModeBanner:false para sacar la marca de agua de debug.

analysis_options.yaml -> rules -> prefer_const_constructor para evitar poner const todo el rato.

--------------------

Container -> Child

row]
      ----> Children
column]

Generar página nueva e lib/NombreCarpeta/Cualquier_Wea.dart (siempre se nombran en minúscula y los espacios con guion bajo).
Dentro del dart: 
  - import 'package:flutter/material.dart'
  - (Las páginas que no cambian de estado "stateles widget", las que si "stateful widget")
  - Poner o stateless o stateful y rellenar automaticamente, luego, cambiar nombre de la clase y del constructor al mismo, por ejemplo: HomePage.
  - Cambiar el  return Container a return Scaffold() ¿Por qué?
  -final estiloTexto1 = //guardar estilos en caso de que se repitan mucho
  - Dentro del Scaffold(//APPBAR
                          appbBar: AppBar( //Esto es basicamente crear un objeto de appbar
                            title: Text('Ejemplo clase', style: TextStyle(color: Colors.white)), //En el primer parámetro es el contenido, en el otro es el style para estilizarlo (text->style-TextStyle)
                            backgroundColor: Colors.purple, //Color del appbar
                            centerTitle: true, //centrar
                            leading: Icon(Icons.android, size: 50, color: Colors.white) // los iconos se sacan de google fonts
                          ),
                          //Body
                          body: Padding(
                            //mainAxisAlignment: MainAxisAlignment.spaceBetween (se van a distribuir equitativamente horizontlmente)
                            //mainAxisAlignment: MainAxisAlignment.spaceAround (Lo mismo que arriba pero con espacios)
                            //mainAxisAlignment: MainAxisAlignment.spaceEvenly (Lo mismo que arriba tambien pero con espacio igual en todos los elementos)
                            //mainAxisAlignment: MainAxisAlignment.spaceStart (todo a la izquierda)
                            padding: const EdgeInsets.all(8.0);
                            child:Row(
                              children: [ //Se van a alinear por default horizontalmente
                              Text('Palabra', Style: TextStyle(fontSize: 30)),
                              Text('Palabra', Style: TextStyle(fontSize: 30)),
                              Text('Palabra', Style: TextStyle(fontSize: 30)), 
                              ],
                            ), 
                          ),
                        );

-Para poner la otra vista como main page ir a main.dart e ir y editar/poner home: HomePage() -> este caso seria HomePage)

Main axis -> horizontal  en los rows este es el eje principal   (Para centrar start-----------center------------end) (space between, space around, space evenly)
Cross axis -> vertical   en los columns este es el eje principal

Los rows y los cols no tienen margen, padding nada ni colores.
Los containers si.

para envolver en widgets: (ctrl + .) -> wrap with el que quiero

A los containers se les puede cambiar el color (Colors.lightGreen.shade200) (shade es la opacidad), como tambien padding (padding: EdgeInsets.all(5)), los margenes es lo mismo (margin: "", pero por ejemplo si quieron poner arriba seria EdgeInsets.Only(top: 25))

para añadir borders a los containers (decoration: BoxDecoration(border: Border.all(color:Colors.nombredelcolorxd, width: 3)))
Para usar colores hexadecimales fuera de Colors se usa Color(codigo) (Singular sin la s)



-STATEFUL-

statefulW -> setear nombre a todas las clases a HomePage
se envuelve todo el widget en un form para poder hacer forms

.Para hacer campos forms: TextFormField();
Para editar estos campos(el form field no el container): decoration: InputDecoration(
                                                          labelText: 'Email', //label
                                                          hintText: 'Escriba Su correo electronico' //placeholder
                                                        )
Antes de lo anterior (adentro del texto from field): keyboardType: TextInputType.emailAddress(), tambien puede ser .number ; -> Hace aparecer el teclado apropiado para lo que se quiere ingresar.

.Los botones por default ocupan todo el ancho de el container, para poner lado a lado 2 botones hay que hacer 2 containers en un row y cada uno con expanded(para que cada uno ocupa 50% del espacio)

Catálogo de widgets, material icons, buttonStyle class

FilledButton(
  child: Text('Enviard Datos')
  onPressed: (){
    //Hay hacer un controller para tomar datos de los text form fields. hay que hacer un controller, abajo hay un ejemplo.
    String email = emailCtrl.text;
    int edad = edadCtrl.text
    //Parsear los datos porque entran todos como strin (´para la edad
    int edad = int.tryParse(edadCtrl.text)??0; (los ?? significa excepto que sea null que se haga el valor siguiente,en este caso 0)
    print('EMAIL: ' + email + ' EDAD:' + edad.toString()); //lo paso a la consola
    setState((){
      resultados = "EMAIL:$email EDAD:$edad";
    }
  }
)

TextEditingController emailCtrl = TextEditingController();
TextEditingController edadCtrl = TextEditingController();

Estos se ponen inemdiatamente adentro del text form field como: controller: edadCtrl

el expanded estira el boton en el eje principal, al container ponerle width: double.infinity. (lo que pasa es que el container esta dentro de un columnn, entonces se estiraria hacia abajo)

para poner el resultado en la pantalla hacer otro container afuera del que estamos trabajando y poner en el child:
(antes se pone globalmente una variable, String resultados = "";)
child: Text(resultados),

Codigo:

import 'package:flutter/material.dart';

class Lab3Page extends StatefulWidget {
  const Lab3Page({super.key});

  @override
  State<Lab3Page> createState() => _Lab3PageState();
}

class _Lab3PageState extends State<Lab3Page> {
  TextEditingController valorCtrl = TextEditingController();
  TextEditingController montoCtrl = TextEditingController();
  String calculoUsd = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Ejercicio clase 3"),
        backgroundColor: Colors.red,
      ),
      body: Column(
        children: [
          Container(
            color: Colors.red,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.paid,
                  color: Colors.white,
                ),
                Text(
                  'Conversor USD a CLP',
                  style: TextStyle(color: Colors.white),
                )
              ],
            ),
          ),
          Container(
            child: Column(
              children: [
                TextFormField(
                  controller: valorCtrl,
                  decoration: InputDecoration(
                    labelText: "Valor CLP de 1 USD",
                    hintText: "0",
                  ),
                ),
                TextFormField(
                  controller: montoCtrl,
                  decoration: InputDecoration(
                    labelText: "Monto USD",
                    hintText: "0",
                  ),
                ),
              ],
            ),
          ),
          Container(
            width: double.infinity,
            child: FilledButton(
              child: Text("Calcular CLP"),
              onPressed: () {
                int valor = int.tryParse(valorCtrl.text) ?? 0;
                int monto = int.tryParse(montoCtrl.text) ?? 0;

                int suma = valor + monto;

                setState(() {
                  calculoUsd = "SUMA: $suma";
                });
              },
            ),
          ),
          Container(
            child: Text(calculoUsd),
          )
        ],
      ),
    );
  }
}

-----------------------------------------------------------------------------------------------

los columns: no incluyen scrolls
ListViews: scrolls en cualquier direccion

pasos:
-crear statelesswidget
El listview tiene esta forma:
ListView(
  children:[
    ListTile(
      title: text('')
      subtitle: Text('')
      trailing: Container(
        child: OutlinedButton(
        )
      leading: Icon.Icons,.....  //lo que uno desee
      )
    )
    Divider(
      thickness: 3,
      color: Colors.lightBlue,
    )
  ]
)

ListTitle espera que title y subtitle sean text

en leading y trailing se pueden poner cualquier cosa.
M
pub.dev-> material desing icons y usar material_design_icons_flutter, ejecutar comndo flutter en el terminal dentro del proyecto. se usan: Icon(MdiIcons.nombreDeIcono)<

para que el listview pueda ocupar solo un pedazo de la pantalla, se pone dentro de un Expanded.

------------------------------------
|               title              |
|leading                   trailing|
|              subtitle            |
------------------------------------

Con esto simulamos que nos llega uuna lista de una api
final alumnos=[
  {'nombre':'alumno1'}
  {'nombre':'alumno1'}
  {'nombre':'alumno1'}
];

dentro del children del list view sacar los corchetes:

children: alumnos.map((e) => null); -> conesto podemos generar una instancia liststyle por cada alumno.
e es el puntero de la iteracion, se puede cambiar

children: alumnos.map((alumno) {
  return ListTile(
    title: Text(alumno['nombre'].toString()) -> esto es porque no sabe que tipo de atributo es, por eso el toString.
    subtitle: Text(alumno['otra propiedad'].toString())
  );
}).toList(),


donde poner fotos? -> crear carpeta en la raiz del proyecto llamda 'assets' y dentro creamos carpeta llamada 'images'

para ocuparlo

Image(
  image: AssetImage('assets/images/nombre del archivo.extension'),
)

ir a pubspec.yaml descomentar assets: y tener cuidado con la identacion y abajo de assets adentro poner '- assets/images/' (debe tener el ultimo slash, o si no va a tomar imagen como archivo)


---------------------------------------------------------------------------------------

Vamos a generar un nuevo directorio dentro de lib llamado widgets (vamosa construir widgets para reutilizar, como los templates.)

-Realizar widget a mostrar ahí.
-Importarlo a la vista main.(normalmente es automatico)
-Usarlo: Nombre(); donde se necesita.
-ir a pub.dev -> buscar material design icons flutter e instalarlo con el metodo que desee.
-desarrollar widget.
-si vamos a trabajar en un column por defecto el texto dentro de los containers sale al centro... si se quiere cambiar->crossAxisAlignment.start
-si se tiene tres elementos en un row, y quiero poner el primero a la izquierda, el segundo al centro y el tercero a la derecha se puede ocupar un alignmente spaceBetween o se puede ocupar un Spacer() entremedio de los elementos.<<
-declarar nombre de los atributos al principio del class antes del override, se declaran como final (no pueden cambiar) en un stateless widget ya que no pueden cambiar, (en los stateful es lo contrario);

Los finals pueden ser null y adquirir un valor.
los const tienen que tener un valor inmediatamente cuando se declara., no puede ser null.

-generar constructor de la clase (ProductoCard por ejemplo): ProductoCard();

para poner argumentos en el constructor sin necesidad de posicion correcta:

ProductoCard({this.nombre='',this.precio='',this.stock=''}) se le es asigna '' en el caso de que no se ingresen (null) y nose caiga.

en las partes que se quiera poner la variable se ponen. recuerda ${} y \$, etc.

se puede hacer un folder dentro de lib llamado constants y hacer un.dart que tenga la coleccion, luego importarla en la vista que se va a usar.

los ListView tienen un atributo que se llama scrollDirection = Axis.Horizontal o Vertical para cambiar la direccion del scrolling.
También Reverse que es un boolean y puede dar vuelta el scrolling para hacerlo para el otro lado.

Al momento de ocupar el ListView con otros widgets que lo esten acompañando, se tiene que poner el ListView dentro de un Expanded para evitar problemas.

Para cambiar de color un botón: se le pone como atributo style.FilledButton.styleFrom(BackgroundColor: colors.fhdfh)
