1) Inicializar proyecto: CTRL + SHIFT + P -> Escribir Flutter -> Seleccionar New Project -> Seleccionar Application -> Seleccionar Lugar sin nombre -> Poner nombre

2) Ejecutar proyecto: Android Studio -> more actions -> Virtual device manager -> Create device (Phonearena.com para especificaciones de un celular) -> pixel 6 pro -> next
                      CTRL + SHIFT + P -> Seleccionar mobile emulator -> dentro de archivo dart (el directorio no debe tener carácteres especiales) fn + f5. Para detener depuracion clickear boton stop.

                      Para un proyecto flutter descargado -> flutter pub get en el terminal

3) X:\new project\flutter_app_1\android\app\src\main\AndroidManifest.xml -> android:label="Nombre de la app" -> android:icon="directorio de imagen se encuentran en la carpeta res"

widget -> StatelessWidget
        ->StatefulWidget

Investigar los componentes del scaffold

despues del title poner leading (dentro deL scaffold/AppBar): leading: Icon(Icons.home) -> para poner iconos

Dentro de MaterialApp (home: const MyHomePage(title: 'I Love: ') -> se puede editar el titulo.

Arriba en MaterialApp poner: debugShowCheckedModeBanner:false para sacar la marca de agua de debug.

analysis_options.yaml -> rules -> prefer_const_constructor para evitar poner const todo el rato.

--------------------

Container -> Child

row]
      ----> Children
column]

Generar página nueva e lib/NombreCarpeta/Cualquier_Wea.dart (siempre se nombran en minúscula y los espacios con guion bajo).
Dentro del dart: 
  - import 'package:flutter/material.dart'
  - (Las páginas que no cambian de estado "stateles widget", las que si "stateful widget")
  - Poner o stateless o stateful y rellenar automaticamente, luego, cambiar nombre de la clase y del constructor al mismo, por ejemplo: HomePage.
  - Cambiar el  return Container a return Scaffold() ¿Por qué?
  -final estiloTexto1 = //guardar estilos en caso de que se repitan mucho
  - Dentro del Scaffold(//APPBAR
                          appbBar: AppBar( //Esto es basicamente crear un objeto de appbar
                            title: Text('Ejemplo clase', style: TextStyle(color: Colors.white)), //En el primer parámetro es el contenido, en el otro es el style para estilizarlo (text->style-TextStyle)
                            backgroundColor: Colors.purple, //Color del appbar
                            centerTitle: true, //centrar
                            leading: Icon(Icons.android, size: 50, color: Colors.white) // los iconos se sacan de google fonts
                          ),
                          //Body
                          body: Padding(
                            //mainAxisAlignment: MainAxisAlignment.spaceBetween (se van a distribuir equitativamente horizontlmente)
                            //mainAxisAlignment: MainAxisAlignment.spaceAround (Lo mismo que arriba pero con espacios)
                            //mainAxisAlignment: MainAxisAlignment.spaceEvenly (Lo mismo que arriba tambien pero con espacio igual en todos los elementos)
                            //mainAxisAlignment: MainAxisAlignment.spaceStart (todo a la izquierda)
                            padding: const EdgeInsets.all(8.0);
                            child:Row(
                              children: [ //Se van a alinear por default horizontalmente
                              Text('Palabra', Style: TextStyle(fontSize: 30)),
                              Text('Palabra', Style: TextStyle(fontSize: 30)),
                              Text('Palabra', Style: TextStyle(fontSize: 30)), 
                              ],
                            ), 
                          ),
                        );

-Para poner la otra vista como main page ir a main.dart e ir y editar/poner home: HomePage() -> este caso seria HomePage)

Main axis -> horizontal  en los rows este es el eje principal   (Para centrar start-----------center------------end) (space between, space around, space evenly)
Cross axis -> vertical   en los columns este es el eje principal

Los rows y los cols no tienen margen, padding nada ni colores.
Los containers si.

para envolver en widgets: (ctrl + .) -> wrap with el que quiero

A los containers se les puede cambiar el color (Colors.lightGreen.shade200) (shade es la opacidad), como tambien padding (padding: EdgeInsets.all(5)), los margenes es lo mismo (margin: "", pero por ejemplo si quieron poner arriba seria EdgeInsets.Only(top: 25))

para añadir borders a los containers (decoration: BoxDecoration(border: Border.all(color:Colors.nombredelcolorxd, width: 3)))
Para usar colores hexadecimales fuera de Colors se usa Color(codigo) (Singular sin la s)



-STATEFUL-

statefulW -> setear nombre a todas las clases a HomePage
se envuelve todo el widget en un form para poder hacer forms

.Para hacer campos forms: TextFormField();
Para editar estos campos(el form field no el container): decoration: InputDecoration(
                                                          labelText: 'Email', //label
                                                          hintText: 'Escriba Su correo electronico' //placeholder
                                                        )
Antes de lo anterior (adentro del texto from field): keyboardType: TextInputType.emailAddress(), tambien puede ser .number ; -> Hace aparecer el teclado apropiado para lo que se quiere ingresar.

.Los botones por default ocupan todo el ancho de el container, para poner lado a lado 2 botones hay que hacer 2 containers en un row y cada uno con expanded(para que cada uno ocupa 50% del espacio)

Catálogo de widgets, material icons, buttonStyle class

FilledButton(
  child: Text('Enviard Datos')
  onPressed: (){
    //Hay hacer un controller para tomar datos de los text form fields. hay que hacer un controller, abajo hay un ejemplo.
    String email = emailCtrl.text;
    int edad = edadCtrl.text
    //Parsear los datos porque entran todos como strin (´para la edad
    int edad = int.tryParse(edadCtrl.text)??0; (los ?? significa excepto que sea null que se haga el valor siguiente,en este caso 0)
    print('EMAIL: ' + email + ' EDAD:' + edad.toString()); //lo paso a la consola
    setState((){
      resultados = "EMAIL:$email EDAD:$edad";
    }
  }
)

TextEditingController emailCtrl = TextEditingController();
TextEditingController edadCtrl = TextEditingController();

Estos se ponen inemdiatamente adentro del text form field como: controller: edadCtrl

el expanded estira el boton en el eje principal, al container ponerle width: double.infinity. (lo que pasa es que el container esta dentro de un columnn, entonces se estiraria hacia abajo)

para poner el resultado en la pantalla hacer otro container afuera del que estamos trabajando y poner en el child:
(antes se pone globalmente una variable, String resultados = "";)
child: Text(resultados),

Codigo:

import 'package:flutter/material.dart';

class Lab3Page extends StatefulWidget {
  const Lab3Page({super.key});

  @override
  State<Lab3Page> createState() => _Lab3PageState();
}

class _Lab3PageState extends State<Lab3Page> {
  TextEditingController valorCtrl = TextEditingController();
  TextEditingController montoCtrl = TextEditingController();
  String calculoUsd = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Ejercicio clase 3"),
        backgroundColor: Colors.red,
      ),
      body: Column(
        children: [
          Container(
            color: Colors.red,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.paid,
                  color: Colors.white,
                ),
                Text(
                  'Conversor USD a CLP',
                  style: TextStyle(color: Colors.white),
                )
              ],
            ),
          ),
          Container(
            child: Column(
              children: [
                TextFormField(
                  controller: valorCtrl,
                  decoration: InputDecoration(
                    labelText: "Valor CLP de 1 USD",
                    hintText: "0",
                  ),
                ),
                TextFormField(
                  controller: montoCtrl,
                  decoration: InputDecoration(
                    labelText: "Monto USD",
                    hintText: "0",
                  ),
                ),
              ],
            ),
          ),
          Container(
            width: double.infinity,
            child: FilledButton(
              child: Text("Calcular CLP"),
              onPressed: () {
                int valor = int.tryParse(valorCtrl.text) ?? 0;
                int monto = int.tryParse(montoCtrl.text) ?? 0;

                int suma = valor + monto;

                setState(() {
                  calculoUsd = "SUMA: $suma";
                });
              },
            ),
          ),
          Container(
            child: Text(calculoUsd),
          )
        ],
      ),
    );
  }
}

-----------------------------------------------------------------------------------------------

los columns: no incluyen scrolls
ListViews: scrolls en cualquier direccion

pasos:
-crear statelesswidget
El listview tiene esta forma:
ListView(
  children:[
    ListTile(
      title: text('')
      subtitle: Text('')
      trailing: Container(
        child: OutlinedButton(
        )
      leading: Icon.Icons,.....  //lo que uno desee
      )
    )
    Divider(
      thickness: 3,
      color: Colors.lightBlue,
    )
  ]
)

ListTitle espera que title y subtitle sean text

en leading y trailing se pueden poner cualquier cosa.
M
pub.dev-> material desing icons y usar material_design_icons_flutter, ejecutar comndo flutter en el terminal dentro del proyecto. se usan: Icon(MdiIcons.nombreDeIcono)<

para que el listview pueda ocupar solo un pedazo de la pantalla, se pone dentro de un Expanded.

------------------------------------
|               title              |
|leading                   trailing|
|              subtitle            |
------------------------------------

Con esto simulamos que nos llega uuna lista de una api
final alumnos=[
  {'nombre':'alumno1'}
  {'nombre':'alumno1'}
  {'nombre':'alumno1'}
];

dentro del children del list view sacar los corchetes:

children: alumnos.map((e) => null); -> conesto podemos generar una instancia liststyle por cada alumno.
e es el puntero de la iteracion, se puede cambiar

children: alumnos.map((alumno) {
  return ListTile(
    title: Text(alumno['nombre'].toString()) -> esto es porque no sabe que tipo de atributo es, por eso el toString.
    subtitle: Text(alumno['otra propiedad'].toString())
  );
}).toList(),


donde poner fotos? -> crear carpeta en la raiz del proyecto llamda 'assets' y dentro creamos carpeta llamada 'images'

para ocuparlo

Image(
  image: AssetImage('assets/images/nombre del archivo.extension'),
)

ir a pubspec.yaml descomentar assets: y tener cuidado con la identacion y abajo de assets adentro poner '- assets/images/' (debe tener el ultimo slash, o si no va a tomar imagen como archivo)


---------------------------------------------------------------------------------------

Vamos a generar un nuevo directorio dentro de lib llamado widgets (vamosa construir widgets para reutilizar, como los templates.)

-Realizar widget a mostrar ahí.
-Importarlo a la vista main.(normalmente es automatico)
-Usarlo: Nombre(); donde se necesita.
-ir a pub.dev -> buscar material design icons flutter e instalarlo con el metodo que desee.
-desarrollar widget.
-si vamos a trabajar en un column por defecto el texto dentro de los containers sale al centro... si se quiere cambiar->crossAxisAlignment.start
-si se tiene tres elementos en un row, y quiero poner el primero a la izquierda, el segundo al centro y el tercero a la derecha se puede ocupar un alignmente spaceBetween o se puede ocupar un Spacer() entremedio de los elementos.<<
-declarar nombre de los atributos al principio del class antes del override, se declaran como final (no pueden cambiar) en un stateless widget ya que no pueden cambiar, (en los stateful es lo contrario);

Los finals pueden ser null y adquirir un valor.
los const tienen que tener un valor inmediatamente cuando se declara., no puede ser null.

-generar constructor de la clase (ProductoCard por ejemplo): ProductoCard();

para poner argumentos en el constructor sin necesidad de posicion correcta:

ProductoCard({this.nombre='',this.precio='',this.stock=''}) se le es asigna '' en el caso de que no se ingresen (null) y nose caiga.

en las partes que se quiera poner la variable se ponen. recuerda ${} y \$, etc.

se puede hacer un folder dentro de lib llamado constants y hacer un.dart que tenga la coleccion, luego importarla en la vista que se va a usar.

los ListView tienen un atributo que se llama scrollDirection = Axis.Horizontal o Vertical para cambiar la direccion del scrolling.
También Reverse que es un boolean y puede dar vuelta el scrolling para hacerlo para el otro lado.

Al momento de ocupar el ListView con otros widgets que lo esten acompañando, se tiene que poner el ListView dentro de un Expanded para evitar problemas.

Para cambiar de color un botón: se le pone como atributo style.FilledButton.styleFrom(BackgroundColor: colors.fhdfh)

Nota: si voy a hacer un container que tenga un box decoration, si el container usa color: este debo ponerlo dentro del boxdecoration o sino no va a funcionar.

Codigo:
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: Icon(
          MdiIcons.gamepadSquare,
          size: 40,
          color: Colors.deepOrange,
        ),
        title: Row(
          children: [
            Text('La Tiendita ', style: TextStyle(color: Colors.blue)),
            Text(
              'USM',
              style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
            )
          ],
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Container(
              padding: EdgeInsets.all(5),
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(7),
                  color: Colors.orange,
                  border: Border.all(width: 1, color: Colors.deepOrange)),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    'Catálogo de juegos',
                    style: TextStyle(color: Colors.white, fontSize: 20),
                  ),
                  Icon(MdiIcons.gamepadVariant, color: Colors.white),
                ],
              ),
            ),
            Expanded(child: ListView(
              
              children: [

              ],
            ))
          ],
        ),
      ),
    );
  }
}

------------------------------------------------------------------------------------------


MaterialPageRoute -> definir destino, ruta (a donde quiero ir)

Navigator

en las app moviles la pagina anterior no de desaparece, flutter lo almacena en la memoria y pone encima la nueva pagina, flutter pone las paginas como pilas.
cuando hay mas de 1 pagina, flutter detecta esto y te da la opcion de volver.

basicamente es un pop, push.


para concatanar un atributo icono en el widget que se esta construyendo se usa final IconData icon.

para ir a una pagina con un tap en un listTile -> onTap: (){}

hay que pone rahora un atributo Widget -> final Widget? destino; (el ? es por caso de que sea null) y colocarlo en el constructor.  (en la pagina nueva)

en donde van a ponerse los atributos -> Text(this.titulo??'Sin Titulo')  (en el caso de que sea null se pone sin titulo)

y luego en la pagina principal poner en el atributo la pagina -> destino: BodegaPage().

podemos tambien hacer lo siguiente (en la vista destino)

if(this.destino!=null){
  MaterialPageRoute ruta = MaterialPageRoute(builder: (context){ return this.destino!});  -> se le pasa context a builder y retorna el destino que se le da con un signo de excalamacion porque flutter piensa que destino puede ser null... pero como no puede entrar al if si es nul con el signo de exlamacion se obvia.
}

Navigator.push(context, ruta) -> en el caso que se programa un boton para volver deberia estar usando Navigator.pop(context)

context es el que contiene el arbol de toda la aplicacion.

-------------------------------------------

Para la navegacion por tabs, se empieza con el widget DefaultTabController() y adentro va el scaffold... este necesita el children y length -> (cantidad de elementos)

dentro del appbar, el appbar tiene un atributo que se llama bottom: y se le puede asignar un TabBar( tabs: [ Tab(text: , icon: ) ]),

TabBar tiene atributos para el color:
-labelColor:

Nota: dentro de Tab se puede poner un child:, en el caso de que quiera ocupar un container o otro diseño.

-el color de los no seleccionados se cambian con "unselectedLabelColor: ",

-otro atributo es "isScrollable = true o false", en el caso de que se amuy largo

para el body es:   body: TabBarView(children: [ pagina1(), pagina2() ]);

para los bottomNavigationBar si o si tiene que ser un stateful.

para convertir un stateless en stateful en el caso deequivocarse hacer click en el nombre del que heréda la clase y darle ctrl + .

el scaffold tiene un atributo que se llama bottomNavigationBar: BottomNavigationBar( type: BottomNavigationBarType.fixed, items: [BottomNavigationBarItem(label: 'Home', icon: ),] )  -> acepta como minimo 2 items

int paginaSeleccionada = 0;
Widget pagina = 

BottomNavigationBar() tiene un atributo currentIndex: paginaSeleccionada, tambien otro "onTap: (index){ paginaSeleccionada = index  }" -> podemos establecer una variable al principio y este asignarla a currentIndex... y cada vez que entre al ontap que tome el valor del indice del argumento, lo mismo con la pagina con un switch case en el caso del index poner la Pagina().

para que no se destruyan las paginas ya que las paginas quedarian no referenciadas cuando se cambian, haccer una lista con las paginas a ocupar de tal manera que quedan referenciadas todo el rato.

se puede cambiar el type a .shifting para que se apliquen colores individuales.

---------------------------------------

Scaffold tiene atributo drawer:

se le asigna Drawer() ->es como un container.

en el caso de ponerlo a la derecha se pone endDrawer();

este se le puede poner un ListTile por ejemplo.

a los listview tienen un atributo se le puede poner un DrawerHeader que tiene como child un text(), esto es como un titulo.
a este child se le puede poner un container con un decoration: BoxDecoration(shape:, border:, image: DecorationImage(image: AssetImage())). 

los stack ordenan los widgets en el eje z.

-----------------Desarrollo desoftware-----------------------------

-crear proyecto wpf, y 2 biblotecas de clases

-añadir nugets a la solucion, añadir entity framework e instalarla a todos los proyectos

-luego recompilar solucion (click derecho)

-añadir nuevo elemento en proyecto datos, irse a elemnto data y agregar base de datos basada en servicio.

-click derecho en ese elemento ahora ya creado, click derecho -> propiedades , seleccionar copiar si es posterior.

-doble click en el mismo ahora y aparecera la base de datos a la izquierda.

- si no aparece ir a ver (arriba) y seleccionar explorador de servidores.

- doble click en tablas.

- propiedades de la id, click derecho propiedades, irsea  especificacion de identidad y setear a gusto.

- agregar elemento a proyeto datos ADO.NET ENTITY DATA MODEL.

- en el asistente para entiy data model, seleccionar el primero., cuando pida seleccionar todas las tablas.

¿que hay que hacer con el appconfig?
copiar ruta de la base de datos y pegarlo donde dice attachdbfile, y copiar el connectionString completo
en el proyecto negocio agregar las bll

en la clase : NombreBaseDeDatosEntities varialbe = new ''() como atributo

metodos = -varialbe.Tabla.Add(cosa);
          -''.SaveChanges();
          -''.Where(puntero => puntero.nombre == nombre).FirstOrDefault();
          -''.ToList()  -> en el caso que se quiera llevar toda la tabla para mostrarla.
          -''.Remove(nombre);

hernan saavedra yutub
-------------------------------------
en main abajo de home:

poner routes: {
  '/':(context) => Nav1Page()
  '/':(context) => Nav2Page()   ->  hemos generado rutas... desde este momento no se puede ocupar el home:, asi que comentarlo
},
initialRoute: '/',

varaible de destino en widget  cambiarla a tipo String y el default seria un '/'.

en el tile ir a destino y cambiarlo por el nombre de la ruta, ejemplo: '/bodega'.

en le onTap, borrar la parte del MaterialPageRoute, todo el if si se el valor nunca va a ser null.<
y agregar Navigator.pushNamed(context, '/nombrederuta'), como tenemos el destino de una variable,  entonces podria er (context, this.destino).


///
Dentro del onTap:
//Duracion
//construir ruta
//definirtransicion

PageRouteBuilder pageRouteBuilder = PageRouteBuilder(
  TransitionDuration: Duration(seconds: 1) ,
  PageBuilder: (context, animation,secondaryAnimation){
    return this.destino!;   ->aqui no se hace lo de mas arriba que se cambia el widget por un string. se dejame como estaba. y se pone el signo de exclamacion para que no                                                                                                                                                     alegue se que no es null
  },
  TransitionBuilder: (context, animation, secondaryAnimation, child){ ->el child es lo que retorna el pagebuilder
    return SlideTransition(
      position: Tween(begin: Offset(-1,0), end: Offset(0,0)).animate(animation), ->para que sea el movimiento horizontal 0 es centor, -1 es full izquierda y 1 es full             child: child,                                                                derecha., verticalmente el -1 esta arriba
    );
  }

);

Navigator.push(context, pageRouteBuilder);



------------------------------------------------------------------------------------------------------------------------
UNIDAD 2

en postman http://localhost:8000/api/pilotos y get

Route::apiResource('/pilotos', PilotosController::class);

php artisan route:list para ver las rutas generadas

--------------------------------------------------------------------------------------------------------------------
buscar e instalar http 1.1.0 en pub.dev (hace la funcion de postman pero desde codigo flutter)

hacer otro directorio en lib llamado services y generar un archivo http_service.dart

y dentro de ese archivo:

import 'package:http/http.dart' as http;

//esto es para no tener que escribir el principio de la url ya que nunca cambia.
class HttpService{
  final String apiUrl = 'http://10.0.2.2/api';
  
// de esta manera recibiermos la lista y no se freezeara la interfaz
  Future<List<dynamic>< pilotos()async{
    var respuesta =  await http.get(Uri.parse(apiUrl+'/pilotos'));
    if (respuesta.statusCode==200){
      return json.decode(respuesta.body); //importar dart:convert
    }
  }

  return [];
}

para conectar el avd a el sistema anfitrion y posteriormente a la api en vez de localhost pusimos 10.0.2.2; esto es solo en un ambiente de desarrollo, y es porque el avd es un sistema separado del sistema donde esta el api.

lo que hace el codigo de arriba es hacer el request y si la respuesta tiene el codigo 200 se hace un decode del body de la respuesta json.

en la vista ahora:

FutureBuilder(
  future: HttpService().pilotos(),
  builder: (context, AsyncSnapshot snapshot) {
    if(!snapshot.hasData || snapshot.connectionState==ConnectionState.waiting){
      //esperando datos, en el codigo del profe sale una manera de poner un ciruclo de carga
    }else{
      return ListView.builder(
        itemCount: snapshot.data.length,
        itemBuilder: (context, index){  //item builder itera
          var piloto = snapshot.data[index];
          return PilotoTile(
            atributo: piloto['atributo'],
          ),
        },
      );
    }
  }, //snapshot nos permite saber el estado del request con el api para poder hacer condiciones, ver repo del profe para el codigo
)

se pueden hacer widgets mas rapido ctrl + . en el widget y opcion extraer widget, luego este se puede copiar a otro archivo.


-------------------------------------------

despues de programar el request, en el client en http service cambiar el void de la funcion agregar a Future<LinkedHashMap<String,dynamic>> (esto es por que al momento deretornar los errores, como se puede ver nombre, puntos, etc son strings pero sus valores cambian. verlo con postman para entender)

si la respuesta del api empieza con [] es un List
si la respuesta del api empieza con {} el tipo de dato es LinkedHashMap

guardar el post en una variable

y retornarlo al final (return json.decode(respuesta.body))

ir al campo_form para ver como puso los errores en la vista

luego modificar el onpressed de agregar, poner el request en una variable respuesta ya que de esa manera podemos saber si podemos quedarnos en la página y mostrar los errores o no y proceder con el pop.

como accedo a los errores dentro de la respuesta: respuesta['errors']['numero']

los errores se ponen arriba de toda la vista ya que las variables que se sacan del onpressed vivan ahí nomas, entonces hay que hacerlas globales.





