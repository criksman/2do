1) Inicializar proyecto: CTRL + SHIFT + P -> Escribir Flutter -> Seleccionar New Project -> Seleccionar Application -> Seleccionar Lugar sin nombre -> Poner nombre

2) Ejecutar proyecto: Android Studio -> more actions -> Virtual device manager -> Create device (Phonearena.com para especificaciones de un celular) -> pixel 6 pro -> next
                      CTRL + SHIFT + P -> Seleccionar mobile emulator -> dentro de archivo dart (el directorio no debe tener carácteres especiales) fn + f5. Para detener depuracion clickear boton stop.

                      Para un proyecto flutter descargado -> flutter pub get en el terminal

3) X:\new project\flutter_app_1\android\app\src\main\AndroidManifest.xml -> android:label="Nombre de la app" -> android:icon="directorio de imagen se encuentran en la carpeta res"

widget -> StatelessWidget
        ->StatefulWidget

Investigar los componentes del scaffold

despues del title poner leading (dentro deL scaffold/AppBar): leading: Icon(Icons.home) -> para poner iconos

Dentro de MaterialApp (home: const MyHomePage(title: 'I Love: ') -> se puede editar el titulo.

Arriba en MaterialApp poner: debugShowCheckedModeBanner:false para sacar la marca de agua de debug.

analysis_options.yaml -> rules -> prefer_const_constructor para evitar poner const todo el rato.

--------------------

Container -> Child

row]
      ----> Children
column]

Generar página nueva e lib/NombreCarpeta/Cualquier_Wea.dart (siempre se nombran en minúscula y los espacios con guion bajo).
Dentro del dart: 
  - import 'package:flutter/material.dart'
  - (Las páginas que no cambian de estado "stateles widget", las que si "stateful widget")
  - Poner o stateless o stateful y rellenar automaticamente, luego, cambiar nombre de la clase y del constructor al mismo, por ejemplo: HomePage.
  - Cambiar el  return Container a return Scaffold() ¿Por qué?
  -final estiloTexto1 = //guardar estilos en caso de que se repitan mucho
  - Dentro del Scaffold(//APPBAR
                          appbBar: AppBar( //Esto es basicamente crear un objeto de appbar
                            title: Text('Ejemplo clase', style: TextStyle(color: Colors.white)), //En el primer parámetro es el contenido, en el otro es el style para estilizarlo (text->style-TextStyle)
                            backgroundColor: Colors.purple, //Color del appbar
                            centerTitle: true, //centrar
                            leading: Icon(Icons.android, size: 50, color: Colors.white) // los iconos se sacan de google fonts
                          ),
                          //Body
                          body: Padding(
                            //mainAxisAlignment: MainAxisAlignment.spaceBetween (se van a distribuir equitativamente horizontlmente)
                            //mainAxisAlignment: MainAxisAlignment.spaceAround (Lo mismo que arriba pero con espacios)
                            //mainAxisAlignment: MainAxisAlignment.spaceEvenly (Lo mismo que arriba tambien pero con espacio igual en todos los elementos)
                            //mainAxisAlignment: MainAxisAlignment.spaceStart (todo a la izquierda)
                            padding: const EdgeInsets.all(8.0);
                            child:Row(
                              children: [ //Se van a alinear por default horizontalmente
                              Text('Palabra', Style: TextStyle(fontSize: 30)),
                              Text('Palabra', Style: TextStyle(fontSize: 30)),
                              Text('Palabra', Style: TextStyle(fontSize: 30)), 
                              ],
                            ), 
                          ),
                        );

-Para poner la otra vista como main page ir a main.dart e ir y editar/poner home: NombreClase() -> este caso seria HomePage)

Main axis -> horizontal  en los rows este es el eje principal   (Para centrar start-----------center------------end) (space between, space around, space evenly)
Cross axis -> vertical   en los columns este es el eje principal

Los rows y los cols no tienen margen, padding nada ni colores.
Los containers si.

para envolver en widgets: (ctrl + .) -> wrap with el que quiero

A los containers se les puede cambiar el color (Colors.lightGreen.shade200) (shade es la opacidad), como tambien padding (padding: EdgeInsets.all(5)), los margenes es lo mismo (margin: "", pero por ejemplo si quieron poner arriba seria EdgeInsets.Only(top: 25))

para añadir borders a los containers (decoration: BoxDecoration(border: Border.all(color:Colors.nombredelcolorxd, width: 3)))

Para usar colores hexadecimales fuera de Colors se usa Color(codigo) (Singular sin la s)

Maria muñoz secretaria académica.
